[alias]

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit

  # View the current working tree status using the short format
  s = status -s

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"

  #pull in and merge latest master into working branch
  mm = !"git pull origin master"

  #pull in remote origin master and merge into existing fork
  knife = !"git fetch upstream && git merge upstream/master"

  #rollback push
  rollback = !"git push -f origin HEAD^:master"

  #hard reset and clean current branch
  bleach = !"git fetch origin; git reset --hard origin/master; git clean -fdx; git pull"

  #undo previous commit
  uncommit = !"git revert HEAD^"

  # Clone a repository including all submodules
  c = clone --recursive

  # Commit all changes
  ca = !git add -A && git commit -av

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Remove the old tag with this name and tag the latest commit with it.
  retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with master

  # a.k.a. ‘delete merged’
  delete-merged-local = "!git branch --merged master | grep -v 'master$' | xargs git branch -D"
  #delete branches without remote origins
  delete-locals-with-no-remotes = "!git remote prune origin && git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -D"
  #delete all local branches except master
  delete-all-local-branches-except-master = "!git branch | grep -v \"master\" | xargs git branch -D"

  #resets

  # reset development branch off of master
  reset-dev-branch = "!git checkout master --force && git push -u origin :dev && git branch -D dev && git go dev && git push -u origin dev"
  # reset staging branch off of master
  reset-staging-branch = "!git checkout master --force && git push -u origin :staging && git branch -D staging && git go staging && git push -u origin staging"
  # reset client-review branch off of master
  reset-client-review-branch = "!git checkout master --force && git push -u origin :client-review && git branch -D client-review && git go client-review && git push -u origin client-review"
  reset-all-dev-branches = "! git reset-dev-branch && git reset-staging-branch && git reset-client-review-branch"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Merge GitHub pull request on top of the `master` branch, supports non origin remotes
  # Merge GitHub pull request on top of the current branch or,
  # if a branch name is specified, on top of the specified branch
  # mpr = "!f() { \
  #   declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
  #   declare branch=\"${2:-$currentBranch}\"; \
  #   if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
  #     git fetch origin refs/pull/$1/head:pr/$1 && \
  #     git checkout -B $branch && \
  #     git rebase $branch pr/$1 && \
  #     git checkout -B $branch && \
  #     git merge pr/$1 && \
  #     git branch -D pr/$1 && \
  #     git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
  #   fi \
  # }; f"

  # List git aliases
  aliases = config --get-regexp alias



[apply]

  # Detect whitespace errors when applying a patch.
  whitespace = fix

[branch]

  # Show most recently changed branches first.
  sort = -committerdate

[core]

  # Use custom `.gitignore` and `.gitattributes`.
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error.
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on macOS.
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

  # Speed up commands involving untracked files such as `git status`.
  # https://git-scm.com/docs/git-update-index#_untracked_cache
  untrackedCache = true

[color]

  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto

[color "branch"]

  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]

  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[color "status"]

  added = yellow
  changed = green
  untracked = cyan

[commit]

  # https://help.github.com/articles/signing-commits-using-gpg/
  # gpgsign = true

[diff]

  # Detect copies as well as renames.
  renames = copies

[diff "bin"]

  # Use `hexdump` to diff binary files.
  textconv = hexdump -v -C

[help]

  # Automatically correct and execute mistyped commands.
  autocorrect = 1

[merge]

  # Include summaries of merged commits in newly created merge commit messages
  log = true

[push]

  # https://git-scm.com/docs/git-config#git-config-pushdefault
  default = simple
  # Make `git push` push relevant annotated tags when pushing branches out.
  followTags = true

# URL shorthands

[url "git@github.com:"]

  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

  insteadOf = "github:"

[url "git@gist.github.com:"]

  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

  insteadOf = "gist:"

[init]

  defaultBranch = master
